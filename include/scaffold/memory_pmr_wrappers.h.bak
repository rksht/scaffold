#include "memory.h"
#include "pool_allocator.h"
#include "temp_allocator.h"

// Not doing buddy allocator for now.

#if __has_include(<memory_resource>)

#include <memory_resource>

namespace fo {

template <size_t BUFFER_SIZE> class PmrTempAllocator : public pmr::memory_resource {
  private:
    TempAllocator<BUFFER_SIZE> _temp_allocator;

  public:
    PmrTempAllocator(fo::Allocator *backing_fo_allocator);

  protected:
    virtual void *do_allocate(size_t size, size_t alignment) override;
    virtual void do_deallocate(void *p, size_t given_size, size_t given_alignment) override;
    virtual bool do_is_equal(const pmr::memory_resource &other) const noexcept override;
};

// -- Impl

template <size_t BUFFER_SIZE>
PmrTempAllocator::PmrTempAllocator(fo::Allocator *backing_fo_allocator)
    : _temp_allocator(backing_fo_allocator) {}

template <size_t BUFFER_SIZE> void *PmrTempAllocator::do_allocate(size_t size, size_t alignment) {
    return _temp_allocator->allocate(size, alignment);
}

template <size_t BUFFER_SIZE>
void *PmrTempAllocator::do_deallocate(void *p, size_t given_size, size_t given_alignment) {
    return _temp_allocator->deallocate(given_size);
};

template <size_t BUFFER_SIZE> void *PmrTempAllocator::do_is_equal(const pmr::memory_resource &other) {
    return this == &other;
}

class PmrMallocAllocator : public pmr::memory_resource {
private:
    MallocAllocator _malloc_allocator;
};

#endif
